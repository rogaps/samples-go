// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package trading

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingServiceClient is the client API for TradingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingServiceClient interface {
	CreateTrading(ctx context.Context, in *CreateTradingRequest, opts ...grpc.CallOption) (*CreateTradingResponse, error)
	CommitTrading(ctx context.Context, in *CommitTradingRequest, opts ...grpc.CallOption) (*CommitTradingResponse, error)
	RegisterActivity(ctx context.Context, in *RegisterActivityRequest, opts ...grpc.CallOption) (*RegisterActivityResponse, error)
}

type tradingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingServiceClient(cc grpc.ClientConnInterface) TradingServiceClient {
	return &tradingServiceClient{cc}
}

func (c *tradingServiceClient) CreateTrading(ctx context.Context, in *CreateTradingRequest, opts ...grpc.CallOption) (*CreateTradingResponse, error) {
	out := new(CreateTradingResponse)
	err := c.cc.Invoke(ctx, "/trading.TradingService/CreateTrading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) CommitTrading(ctx context.Context, in *CommitTradingRequest, opts ...grpc.CallOption) (*CommitTradingResponse, error) {
	out := new(CommitTradingResponse)
	err := c.cc.Invoke(ctx, "/trading.TradingService/CommitTrading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) RegisterActivity(ctx context.Context, in *RegisterActivityRequest, opts ...grpc.CallOption) (*RegisterActivityResponse, error) {
	out := new(RegisterActivityResponse)
	err := c.cc.Invoke(ctx, "/trading.TradingService/RegisterActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServiceServer is the server API for TradingService service.
// All implementations must embed UnimplementedTradingServiceServer
// for forward compatibility
type TradingServiceServer interface {
	CreateTrading(context.Context, *CreateTradingRequest) (*CreateTradingResponse, error)
	CommitTrading(context.Context, *CommitTradingRequest) (*CommitTradingResponse, error)
	RegisterActivity(context.Context, *RegisterActivityRequest) (*RegisterActivityResponse, error)
	mustEmbedUnimplementedTradingServiceServer()
}

// UnimplementedTradingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingServiceServer struct {
}

func (UnimplementedTradingServiceServer) CreateTrading(context.Context, *CreateTradingRequest) (*CreateTradingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrading not implemented")
}
func (UnimplementedTradingServiceServer) CommitTrading(context.Context, *CommitTradingRequest) (*CommitTradingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTrading not implemented")
}
func (UnimplementedTradingServiceServer) RegisterActivity(context.Context, *RegisterActivityRequest) (*RegisterActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterActivity not implemented")
}
func (UnimplementedTradingServiceServer) mustEmbedUnimplementedTradingServiceServer() {}

// UnsafeTradingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingServiceServer will
// result in compilation errors.
type UnsafeTradingServiceServer interface {
	mustEmbedUnimplementedTradingServiceServer()
}

func RegisterTradingServiceServer(s grpc.ServiceRegistrar, srv TradingServiceServer) {
	s.RegisterService(&TradingService_ServiceDesc, srv)
}

func _TradingService_CreateTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTradingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).CreateTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trading.TradingService/CreateTrading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).CreateTrading(ctx, req.(*CreateTradingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_CommitTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTradingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).CommitTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trading.TradingService/CommitTrading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).CommitTrading(ctx, req.(*CommitTradingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_RegisterActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).RegisterActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trading.TradingService/RegisterActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).RegisterActivity(ctx, req.(*RegisterActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingService_ServiceDesc is the grpc.ServiceDesc for TradingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trading.TradingService",
	HandlerType: (*TradingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrading",
			Handler:    _TradingService_CreateTrading_Handler,
		},
		{
			MethodName: "CommitTrading",
			Handler:    _TradingService_CommitTrading_Handler,
		},
		{
			MethodName: "RegisterActivity",
			Handler:    _TradingService_RegisterActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trading/proto/trading/trading.proto",
}
